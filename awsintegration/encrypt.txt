package main

import (
	"fmt"
	"os"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/credentials"
	"github.com/aws/aws-sdk-go/aws/credentials/stscreds"
	"github.com/aws/aws-sdk-go/aws/session"

	//"github.com/aws/aws-sdk-go/config"
	"github.com/aws/aws-sdk-go/service/kms"
	"github.com/aws/aws-sdk-go/service/sts"
)

// Call aws.Encrypt to encrypt the meal preference text
// Token is exchanged with AWS.
//   - golang library? Or just cmdline and pass it in?
// Call AWS decrypt with the access key provided by the call to AWS IAM
// Print out the results. Failure results in noeat

func getTokenFromLauncher() string {
	// Todo - Ask the Launcher for a custom token
	// Todo - Update the launcher to return this token
	return ""
}

func writeTokenToPath(token string, tokenPath string) {
	return
}

func fetchBlobFromGCS() string {
	// Bucket is unsecured for the demo, no credentials required
	// Todo - Download file from the bucket
	return "thisismytestblob"
}

func main() {
	tokenPath := "./token"

	token := getTokenFromLauncher()
	writeTokenToPath(token, tokenPath)

	// Get Creds from AWS
	//config, err := config.LoadDefaultConfig(context.TODO())
	// if err != nil {
	// 	log.Fatal(err)
	// }

	sess, _ := session.NewSession(&aws.Config{
		Region: aws.String("us-east-2")})
	sts := sts.New(sess)
	roleARN := "arn:aws:iam::232510754029:role/mealcorp-keyaccess"

	roleProvider := stscreds.NewWebIdentityRoleProviderWithOptions(sts, roleARN, "gosession", stscreds.FetchTokenPath(tokenPath))

	// Call Decrypt with Creds
	//blobFromGCS := fetchBlobFromGCS()

	data, _ := os.ReadFile("./data")

	svc := kms.New(sess, &aws.Config{
		Credentials: credentials.NewCredentials(roleProvider),
	})
	input := &kms.EncryptInput{
		KeyId:     aws.String("arn:aws:kms:us-east-2:232510754029:key/32e9c399-58ef-4b89-96ec-46473d53cd6f"),
		Plaintext: data,
	}
	result, err := svc.Encrypt(input)
	if err != nil {
		if aerr, ok := err.(awserr.Error); ok {
			switch aerr.Code() {
			case kms.ErrCodeNotFoundException:
				fmt.Println(kms.ErrCodeNotFoundException, aerr.Error())
			case kms.ErrCodeDisabledException:
				fmt.Println(kms.ErrCodeDisabledException, aerr.Error())
			case kms.ErrCodeInvalidCiphertextException:
				fmt.Println(kms.ErrCodeInvalidCiphertextException, aerr.Error())
			case kms.ErrCodeKeyUnavailableException:
				fmt.Println(kms.ErrCodeKeyUnavailableException, aerr.Error())
			case kms.ErrCodeIncorrectKeyException:
				fmt.Println(kms.ErrCodeIncorrectKeyException, aerr.Error())
			case kms.ErrCodeInvalidKeyUsageException:
				fmt.Println(kms.ErrCodeInvalidKeyUsageException, aerr.Error())
			case kms.ErrCodeDependencyTimeoutException:
				fmt.Println(kms.ErrCodeDependencyTimeoutException, aerr.Error())
			case kms.ErrCodeInvalidGrantTokenException:
				fmt.Println(kms.ErrCodeInvalidGrantTokenException, aerr.Error())
			case kms.ErrCodeInternalException:
				fmt.Println(kms.ErrCodeInternalException, aerr.Error())
			case kms.ErrCodeInvalidStateException:
				fmt.Println(kms.ErrCodeInvalidStateException, aerr.Error())
			case kms.ErrCodeDryRunOperationException:
				fmt.Println(kms.ErrCodeDryRunOperationException, aerr.Error())
			default:
				fmt.Println(aerr.Error())
			}
		} else {
			// Print the error, cast err to awserr.Error to get the Code and
			// Message from an error.
			fmt.Println(err.Error())
		}
		return
	}

	fmt.Printf("Encrypt Succeeded: %v\n", result)

	os.WriteFile("./ciphertext", result.CiphertextBlob, os.ModeAppend)
}
