package main

import (
	"fmt"
	"os"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/credentials"
	"github.com/aws/aws-sdk-go/aws/credentials/stscreds"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/kms"
	"github.com/aws/aws-sdk-go/service/sts"
)

// Call AWS decrypt with the access key provided by the call to AWS IAM
// Print out the results. Failure results in noeat

func getTokenFromLauncher() string {
	// Todo - Ask the Launcher for a custom token
	// Todo - Update the launcher to return this token
	return "eyJhbGciOiJSUzI1NiIsImtpZCI6IjEyMzQ1IiwidHlwIjoiSldUIn0.eyJhdWQiOiJodHRwczovL21lYWwuY29ycCIsImV4cCI6MTcwOTk0MDMyNiwiaHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90YWdzIjp7InByaW5jaXBhbF90YWdzIjp7ImNvbmZpZGVudGlhbF9zcGFjZS5zdXBwb3J0X2F0dHJpYnV0ZXMiOlsiTEFURVNUPVNUQUJMRT1VU0FCTEUiXSwiY29udGFpbmVyLmltYWdlX2RpZ2VzdCI6WyJzaGEyNTY6NjY3YjdjYzk0MDdmN2Q5OTQ5ZDQzZmQ1MWRkZTJhNWI2NmRiOWI2OTVlZjViZmU1MjVjZjg1NzZkNTRmZmFhOSJdLCJkYmdzdGF0IjpbImVuYWJsZWQiXSwiaHdtb2RlbCI6WyJHQ1BfQU1EX1NFViJdLCJzZWNib290IjpbInRydWUiXSwic3duYW1lIjpbIkNPTkZJREVOVElBTF9TUEFDRSJdLCJzd3ZlcnNpb24iOlsiMjMwOTAyIl19fSwiaWF0IjoxNzA5MzQwMzI2LCJpc3MiOiJodHRwczovL3N0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vYXdzX3Rva2VuX2J1Y2tldC9hd3NfdG9rZW5fdGVzdGluZyIsInN1YiI6InRoaXNpc2F0ZXN0c3ViIn0.wYpYdq9UflKIl3An5nRb_KFctyJ0CXzV651UKhjj0MGq-XWPUR3Nu6TKlkPxBOA2IciR2ceAGn209tRBM1ccMSUumsCL4-55gNVWfgcgZdIDmlrtCaHmiY7lo50dZky0gRDmulALeiPpJmIA-oGm_hAZ3ZalE_fbhKX-J6zH0eAkqBA14euN6YbVVA5tJkN5XoYZVvnQMkHj9V8XD-jZiJ22BuAFwNxkZR2IcSQWPeaYREKmzOOdvDURuqyuOVPOXJ-HTghLCBxyc4D73M1JgCUvCinZD8liObJ9ytLorRAZl-zgma-QIxA-W8BbJbl2-Mo9qGCE7kbx2xsl_WSlcw"
}

func writeTokenToPath(token string, tokenPath string) {
	os.WriteFile(tokenPath, []byte(token), 0644)
}

func fetchBlobFromGCS() ([]byte, error) {
	// Bucket is unsecured for the demo, no credentials required
	// Todo - Download file from the bucket
	return os.ReadFile("./ciphertext")
}

func main() {
	tokenPath := "./token"

	token := getTokenFromLauncher()
	writeTokenToPath(token, tokenPath)

	sess, _ := session.NewSession(&aws.Config{
		Region: aws.String("us-east-2")})
	sts := sts.New(sess)
	roleARN := "arn:aws:iam::232510754029:role/mealcorp-keyaccess"

	roleProvider := stscreds.NewWebIdentityRoleProviderWithOptions(sts, roleARN, "mealcorp", stscreds.FetchTokenPath(tokenPath))

	// Call Decrypt with Creds
	blobFromGCS, err := fetchBlobFromGCS()
	if err != nil {
		fmt.Printf("failed to fetch blob from GCS: %v", err)
		return
	}

	svc := kms.New(sess, &aws.Config{
		Credentials: credentials.NewCredentials(roleProvider),
	})
	input := &kms.DecryptInput{
		// KeyId is optional for symmetric key decryption, but is a best practice
		KeyId:          aws.String("arn:aws:kms:us-east-2:232510754029:key/32e9c399-58ef-4b89-96ec-46473d53cd6f"),
		CiphertextBlob: []byte(blobFromGCS),
	}

	result, err := svc.Decrypt(input)
	if err != nil {
		if aerr, ok := err.(awserr.Error); ok {
			switch aerr.Code() {
			case kms.ErrCodeNotFoundException:
				fmt.Println(kms.ErrCodeNotFoundException, aerr.Error())
			case kms.ErrCodeDisabledException:
				fmt.Println(kms.ErrCodeDisabledException, aerr.Error())
			case kms.ErrCodeInvalidCiphertextException:
				fmt.Println(kms.ErrCodeInvalidCiphertextException, aerr.Error())
			case kms.ErrCodeKeyUnavailableException:
				fmt.Println(kms.ErrCodeKeyUnavailableException, aerr.Error())
			case kms.ErrCodeIncorrectKeyException:
				fmt.Println(kms.ErrCodeIncorrectKeyException, aerr.Error())
			case kms.ErrCodeInvalidKeyUsageException:
				fmt.Println(kms.ErrCodeInvalidKeyUsageException, aerr.Error())
			case kms.ErrCodeDependencyTimeoutException:
				fmt.Println(kms.ErrCodeDependencyTimeoutException, aerr.Error())
			case kms.ErrCodeInvalidGrantTokenException:
				fmt.Println(kms.ErrCodeInvalidGrantTokenException, aerr.Error())
			case kms.ErrCodeInternalException:
				fmt.Println(kms.ErrCodeInternalException, aerr.Error())
			case kms.ErrCodeInvalidStateException:
				fmt.Println(kms.ErrCodeInvalidStateException, aerr.Error())
			case kms.ErrCodeDryRunOperationException:
				fmt.Println(kms.ErrCodeDryRunOperationException, aerr.Error())
			default:
				fmt.Println(aerr.Error())
			}
		} else {
			// Print the error, cast err to awserr.Error to get the Code and
			// Message from an error.
			fmt.Println(err.Error())
		}
		return
	}

	fmt.Printf("Decrypt Succeeded: %v\n", result)
	fmt.Printf("%v\n", string(result.Plaintext))
}
